rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read;
      allow write: if resource.id == request.auth.uid;
    }
    
    match /{path=**}/permissions/{permissionId} {
      allow read: if resource.data.uid == request.auth.uid;
    }
    
    match /projects/{projectId} {
    	function canReadProject() {
        return get(/databases/$(database)/documents/projects/$(projectId)/permissions/$(request.auth.uid)).data.active == true;
      }
      function isProjectAdmin() {
      	return get(/databases/$(database)/documents/projects/$(projectId)/permissions/$(request.auth.uid)).data.role == 'admin';
      }
    
    	allow read: if canReadProject();
      allow write: if isProjectAdmin();
      
      match /permissions/{permissionId} {
      	allow read: if canReadProject();
        allow write: if isProjectAdmin();
      }
      
      match /invites/{inviteId} {
      	allow read: if isProjectAdmin();
        allow write: if isProjectAdmin();
      }
      
      match /pipelines/{pipelinesId} {
      	allow read: if canReadProject();
        allow write: if isProjectAdmin();
      }
      
      match /labels/{labelId} {
      	allow read: if canReadProject();
        allow write: if isProjectAdmin();
      }
      
      match /forms/{formId} {
      	allow read: if canReadProject();
        allow write: if isProjectAdmin();
      }
      
      match /requests/{requestId} {
      	allow read: if canReadProject();
        allow write: if canReadProject();
      }
      
      match /timelines/{timelineId} {
      	allow read: if canReadProject();
        allow write: if canReadProject();
      }
    }
  }
}